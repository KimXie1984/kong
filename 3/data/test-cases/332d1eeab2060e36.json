{"uid":"332d1eeab2060e36","name":"test_new_gateway_service","fullName":"src.ui_tests.gateway.test_gateway_service.TestGatewayService#test_new_gateway_service","historyId":"137d9ae4941e3d4763eb602909a80c22","time":{"start":1719052454296,"stop":1719052455582,"duration":1286},"status":"failed","statusMessage":"AssertionError: Verify actual = expected: 0 = 1\n{'values_changed': {'root': {'new_value': 1, 'old_value': 0}}}","statusTrace":"self = <ui_tests.gateway.test_gateway_service.TestGatewayService object at 0x7fe223568e80>\n\n    def test_new_gateway_service(self):\n        Workspaces(self.page).go_to_workspace(self.base_url, \"default\")\n        Workspace(self.page).click_gateway_services()\n        Workspace(self.page).click_add_gateway_service()\n        GatewayService(self.page).new_gateway_service_by_url(f\"{RandomUtil.timestamp()}\", \"jerry\",\n                                                             f\"http://joy{RandomUtil.timestamp()}.org\")\n>       self.verifier.verify_equals(GatewayService(self.page).count_gateway_services(), 1)\n\nsrc/ui_tests/gateway/test_gateway_service.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/ui_tests/base_test/base_verifier.py:104: in verify_equals\n    self.fail(logmsg)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ui_tests.base_test.base_verifier.BaseVerifier object at 0x7fe223547850>\nmsg = \"Verify actual = expected: 0 = 1\\n{'values_changed': {'root': {'new_value': 1, 'old_value': 0}}}\"\n\n    def fail(self, msg=''):\n        '''Fail this test.\n    \n        :type msg: string\n        :param msg: The message to fail with.\n    \n        >>> v = VerifierBase()\n        >>> v.fail('test failed')\n        Traceback (most recent call last):\n        AssertionError: test failed\n        '''\n        self.logger.error(f\"{msg} ==> FAIL\")\n>       raise AssertionError(msg)\nE       AssertionError: Verify actual = expected: 0 = 1\nE       {'values_changed': {'root': {'new_value': 1, 'old_value': 0}}}\n\nsrc/ui_tests/base_test/base_verifier.py:30: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"delete_output_dir","time":{"start":1719052452593,"stop":1719052452594,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1719052452593,"stop":1719052452593,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1719052452593,"stop":1719052452593,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"event_loop_policy","time":{"start":1719052452593,"stop":1719052452593,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1719052452593,"stop":1719052452593,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"page","time":{"start":1719052452594,"stop":1719052453624,"duration":1030},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"init_url_page","time":{"start":1719052453624,"stop":1719052453624,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"clean_gateway_services","time":{"start":1719052453624,"stop":1719052454295,"duration":671},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Verify actual = expected: 0 = 1\n{'values_changed': {'root': {'new_value': 1, 'old_value': 0}}}","statusTrace":"self = <ui_tests.gateway.test_gateway_service.TestGatewayService object at 0x7fe223568e80>\n\n    def test_new_gateway_service(self):\n        Workspaces(self.page).go_to_workspace(self.base_url, \"default\")\n        Workspace(self.page).click_gateway_services()\n        Workspace(self.page).click_add_gateway_service()\n        GatewayService(self.page).new_gateway_service_by_url(f\"{RandomUtil.timestamp()}\", \"jerry\",\n                                                             f\"http://joy{RandomUtil.timestamp()}.org\")\n>       self.verifier.verify_equals(GatewayService(self.page).count_gateway_services(), 1)\n\nsrc/ui_tests/gateway/test_gateway_service.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/ui_tests/base_test/base_verifier.py:104: in verify_equals\n    self.fail(logmsg)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ui_tests.base_test.base_verifier.BaseVerifier object at 0x7fe223547850>\nmsg = \"Verify actual = expected: 0 = 1\\n{'values_changed': {'root': {'new_value': 1, 'old_value': 0}}}\"\n\n    def fail(self, msg=''):\n        '''Fail this test.\n    \n        :type msg: string\n        :param msg: The message to fail with.\n    \n        >>> v = VerifierBase()\n        >>> v.fail('test failed')\n        Traceback (most recent call last):\n        AssertionError: test failed\n        '''\n        self.logger.error(f\"{msg} ==> FAIL\")\n>       raise AssertionError(msg)\nE       AssertionError: Verify actual = expected: 0 = 1\nE       {'values_changed': {'root': {'new_value': 1, 'old_value': 0}}}\n\nsrc/ui_tests/base_test/base_verifier.py:30: AssertionError","steps":[],"attachments":[{"uid":"dedbeae80465b506","name":"log","source":"dedbeae80465b506.txt","type":"text/plain","size":294},{"uid":"134567f53880b8b","name":"stdout","source":"134567f53880b8b.txt","type":"text/plain","size":14},{"uid":"8bf8b93283d155ea","name":"stderr","source":"8bf8b93283d155ea.txt","type":"text/plain","size":330}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":3,"hasContent":true},"afterStages":[{"name":"init_url_page::0","time":{"start":1719052455806,"stop":1719052455806,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"clean_gateway_services::0","time":{"start":1719052455806,"stop":1719052455806,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"page::0","time":{"start":1719052455807,"stop":1719052456337,"duration":530},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url::0","time":{"start":1719052456360,"stop":1719052456360,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"parentSuite","value":"src.ui_tests.gateway"},{"name":"suite","value":"test_gateway_service"},{"name":"subSuite","value":"TestGatewayService"},{"name":"host","value":"fv-az768-488"},{"name":"thread","value":"4474-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"src.ui_tests.gateway.test_gateway_service"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"332d1eeab2060e36.json","parameterValues":[]}