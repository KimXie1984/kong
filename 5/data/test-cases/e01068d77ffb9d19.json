{"uid":"e01068d77ffb9d19","name":"test_new_route","fullName":"test.ui_tests.gateway.test_route.TestRoute#test_new_route","historyId":"97bf3fd118c883739594fc5aceda9717","time":{"start":1719061547438,"stop":1719061549397,"duration":1959},"status":"failed","statusMessage":"AssertionError: Verify actual = expected: 0 = 1\n{'values_changed': {'root': {'new_value': 1, 'old_value': 0}}}","statusTrace":"self = <ui_tests.gateway.test_route.TestRoute object at 0x7f2b95a6c970>\n\n    def test_new_route(self):\n        self.gateway_service.goto_gateway_service(self.base_url)\n        name = f\"{RandomUtil.timestamp()}\"\n        self.gateway_service.new_gateway_service_by_url(name, \"jerry\",\n                                                        f\"http://joy{RandomUtil.timestamp()}.org\")\n    \n        self.route.goto_routes(self.base_url)\n        existing = self.route.count_route()\n        self.route.new_route(name)\n        new = self.route.count_route()\n>       self.verifier.verify_equals(new, existing + 1)\n\ntest/ui_tests/gateway/test_route.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest/ui_tests/base_test/base_verifier.py:104: in verify_equals\n    self.fail(logmsg)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ui_tests.base_test.base_verifier.BaseVerifier object at 0x7f2b94476aa0>\nmsg = \"Verify actual = expected: 0 = 1\\n{'values_changed': {'root': {'new_value': 1, 'old_value': 0}}}\"\n\n    def fail(self, msg=''):\n        '''Fail this test.\n    \n        :type msg: string\n        :param msg: The message to fail with.\n    \n        >>> v = VerifierBase()\n        >>> v.fail('test failed')\n        Traceback (most recent call last):\n        AssertionError: test failed\n        '''\n        self.logger.error(f\"{msg} ==> FAIL\")\n>       raise AssertionError(msg)\nE       AssertionError: Verify actual = expected: 0 = 1\nE       {'values_changed': {'root': {'new_value': 1, 'old_value': 0}}}\n\ntest/ui_tests/base_test/base_verifier.py:30: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1719061511029,"stop":1719061511030,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"event_loop_policy","time":{"start":1719061511030,"stop":1719061511030,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1719061511030,"stop":1719061511030,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1719061511030,"stop":1719061511030,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1719061511030,"stop":1719061511030,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"page","time":{"start":1719061546531,"stop":1719061547437,"duration":906},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"init_url_page","time":{"start":1719061547437,"stop":1719061547437,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_teardown_method","time":{"start":1719061547437,"stop":1719061547438,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Verify actual = expected: 0 = 1\n{'values_changed': {'root': {'new_value': 1, 'old_value': 0}}}","statusTrace":"self = <ui_tests.gateway.test_route.TestRoute object at 0x7f2b95a6c970>\n\n    def test_new_route(self):\n        self.gateway_service.goto_gateway_service(self.base_url)\n        name = f\"{RandomUtil.timestamp()}\"\n        self.gateway_service.new_gateway_service_by_url(name, \"jerry\",\n                                                        f\"http://joy{RandomUtil.timestamp()}.org\")\n    \n        self.route.goto_routes(self.base_url)\n        existing = self.route.count_route()\n        self.route.new_route(name)\n        new = self.route.count_route()\n>       self.verifier.verify_equals(new, existing + 1)\n\ntest/ui_tests/gateway/test_route.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest/ui_tests/base_test/base_verifier.py:104: in verify_equals\n    self.fail(logmsg)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ui_tests.base_test.base_verifier.BaseVerifier object at 0x7f2b94476aa0>\nmsg = \"Verify actual = expected: 0 = 1\\n{'values_changed': {'root': {'new_value': 1, 'old_value': 0}}}\"\n\n    def fail(self, msg=''):\n        '''Fail this test.\n    \n        :type msg: string\n        :param msg: The message to fail with.\n    \n        >>> v = VerifierBase()\n        >>> v.fail('test failed')\n        Traceback (most recent call last):\n        AssertionError: test failed\n        '''\n        self.logger.error(f\"{msg} ==> FAIL\")\n>       raise AssertionError(msg)\nE       AssertionError: Verify actual = expected: 0 = 1\nE       {'values_changed': {'root': {'new_value': 1, 'old_value': 0}}}\n\ntest/ui_tests/base_test/base_verifier.py:30: AssertionError","steps":[],"attachments":[{"uid":"d57583a96a3ec429","name":"log","source":"d57583a96a3ec429.txt","type":"text/plain","size":293},{"uid":"db4ee7f589e296f5","name":"stderr","source":"db4ee7f589e296f5.txt","type":"text/plain","size":248}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"setup_teardown_method::0","time":{"start":1719061549411,"stop":1719061549411,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"init_url_page::0","time":{"start":1719061549412,"stop":1719061549412,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"page::0","time":{"start":1719061549412,"stop":1719061549655,"duration":243},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url::0","time":{"start":1719061549656,"stop":1719061549656,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"parentSuite","value":"test.ui_tests.gateway"},{"name":"suite","value":"test_route"},{"name":"subSuite","value":"TestRoute"},{"name":"host","value":"fv-az1269-574"},{"name":"thread","value":"4219-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test.ui_tests.gateway.test_route"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"e01068d77ffb9d19.json","parameterValues":[]}